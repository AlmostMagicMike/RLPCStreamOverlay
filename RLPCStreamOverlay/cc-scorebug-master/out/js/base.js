"use strict";

var SOSUtils = {
  /**
   * @param jquerySelector
   * @param maxFontSize
   * @function(string, int): void
   */
  fitText: function fitText(jquerySelector, maxFontSize) {
    // get the DOM output element by its selector
    $(jquerySelector).each(function () {
      var outputDiv = this;
      outputDiv.style.whiteSpace = "nowrap"; // max font size in pixels

      maxFontSize = maxFontSize || parseInt(outputDiv.style.fontSize, 10); // get element's width

      var width = outputDiv.clientWidth; // get content's width

      var contentWidth = outputDiv.scrollWidth; // get fontSize

      var fontSize = parseInt(window.getComputedStyle(outputDiv, null).getPropertyValue('font-size'), 10); // if content's width is bigger then elements width - overflow

      if (contentWidth > width) {
        fontSize = Math.ceil(fontSize * width / contentWidth, 10);
        fontSize = fontSize > maxFontSize ? fontSize = maxFontSize : fontSize - 1;
        outputDiv.style.fontSize = fontSize + 'px';
      } else {
        // content is smaller then width... let's resize in 1 px until it fits
        while (contentWidth === width && fontSize < maxFontSize) {
          fontSize = Math.ceil(fontSize) + 1;
          fontSize = fontSize > maxFontSize ? fontSize = maxFontSize : fontSize;
          outputDiv.style.fontSize = fontSize + 'px'; // update widths

          width = outputDiv.clientWidth;
          contentWidth = outputDiv.scrollWidth;

          if (contentWidth > width) {
            outputDiv.style.fontSize = fontSize - 1 + 'px';
          }
        }
      }
    });
  }
};
"use strict";

var WsSubscribers = {
  __subscribers: {},
  websocket: undefined,
  webSocketConnected: false,
  registerQueue: [],
  init: function init(port, debug, debugFilters) {
    port = port || 49322;
    debug = debug || false;

    if (debug) {
      if (debugFilters !== undefined) {
        console.warn("WebSocket Debug Mode enabled with filtering. Only events not in the filter list will be dumped");
      } else {
        console.warn("WebSocket Debug Mode enabled without filters applied. All events will be dumped to console");
        console.warn("To use filters, pass in an array of 'channel:event' strings to the second parameter of the init function");
      }
    }

    WsSubscribers.webSocket = new WebSocket("ws://localhost:" + port);

    WsSubscribers.webSocket.onmessage = function (event) {
      var jEvent = JSON.parse(event.data);

      if (!jEvent.hasOwnProperty('event')) {
        return;
      }

      var eventSplit = jEvent.event.split(':');
      var channel = eventSplit[0];
      var event_event = eventSplit[1];

      if (debug) {
        if (!debugFilters) {
          console.log(channel, event_event, jEvent);
        } else if (debugFilters && debugFilters.indexOf(jEvent.event) < 0) {
          console.log(channel, event_event, jEvent);
        }
      }

      WsSubscribers.triggerSubscribers(channel, event_event, jEvent.data);
    };

    WsSubscribers.webSocket.onopen = function () {
      WsSubscribers.triggerSubscribers("ws", "open");
      WsSubscribers.webSocketConnected = true;
      WsSubscribers.registerQueue.forEach(function (r) {
        WsSubscribers.send("wsRelay", "register", r);
      });
      WsSubscribers.registerQueue = [];
    };

    WsSubscribers.webSocket.onerror = function () {
      WsSubscribers.triggerSubscribers("ws", "error");
      WsSubscribers.webSocketConnected = false;
    };

    WsSubscribers.webSocket.onclose = function () {
      WsSubscribers.triggerSubscribers("ws", "close");
      WsSubscribers.webSocketConnected = false;
    };
  },

  /**
   * Add callbacks for when certain events are thrown
   * Execution is guaranteed to be in First In First Out order
   * @param channels
   * @param events
   * @param callback
   */
  subscribe: function subscribe(channels, events, callback) {
    if (typeof channels === "string") {
      var channel = channels;
      channels = [];
      channels.push(channel);
    }

    if (typeof events === "string") {
      var event = events;
      events = [];
      events.push(event);
    }

    channels.forEach(function (c) {
      events.forEach(function (e) {
        if (!WsSubscribers.__subscribers.hasOwnProperty(c)) {
          WsSubscribers.__subscribers[c] = {};
        }

        if (!WsSubscribers.__subscribers[c].hasOwnProperty(e)) {
          WsSubscribers.__subscribers[c][e] = [];

          if (WsSubscribers.webSocketConnected) {
            WsSubscribers.send("wsRelay", "register", "".concat(c, ":").concat(e));
          } else {
            WsSubscribers.registerQueue.push("".concat(c, ":").concat(e));
          }
        }

        WsSubscribers.__subscribers[c][e].push(callback);
      });
    });
  },
  clearEventCallbacks: function clearEventCallbacks(channel, event) {
    if (WsSubscribers.__subscribers.hasOwnProperty(channel) && WsSubscribers.__subscribers[channel].hasOwnProperty(event)) {
      WsSubscribers.__subscribers[channel] = {};
    }
  },
  triggerSubscribers: function triggerSubscribers(channel, event, data) {
    if (WsSubscribers.__subscribers.hasOwnProperty(channel) && WsSubscribers.__subscribers[channel].hasOwnProperty(event)) {
      WsSubscribers.__subscribers[channel][event].forEach(function (callback) {
        if (callback instanceof Function) {
          callback(data);
        }
      });
    }
  },
  send: function send(channel, event, data) {
    if (typeof channel !== 'string') {
      console.error("Channel must be a string");
      return;
    }

    if (typeof event !== 'string') {
      console.error("Event must be a string");
      return;
    }

    if (channel === 'local') {
      this.triggerSubscribers(channel, event, data);
    } else {
      var cEvent = channel + ":" + event;
      WsSubscribers.webSocket.send(JSON.stringify({
        'event': cEvent,
        'data': data
      }));
    }
  }
};

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9qcy9TT1NVdGlscy5qcyIsIi4uLy4uL3NyYy9qcy93c19zdWJzY3JpYmVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsSUFBTSxRQUFRLEdBQUc7QUFDYjtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0ksRUFBQSxPQUFPLEVBQUUsaUJBQVMsY0FBVCxFQUF5QixXQUF6QixFQUFzQztBQUMzQztBQUVBLElBQUEsQ0FBQyxDQUFDLGNBQUQsQ0FBRCxDQUFrQixJQUFsQixDQUF1QixZQUFZO0FBQy9CLFVBQUksU0FBUyxHQUFHLElBQWhCO0FBQ0EsTUFBQSxTQUFTLENBQUMsS0FBVixDQUFnQixVQUFoQixHQUE2QixRQUE3QixDQUYrQixDQUkvQjs7QUFDQSxNQUFBLFdBQVcsR0FBRyxXQUFXLElBQUksUUFBUSxDQUFDLFNBQVMsQ0FBQyxLQUFWLENBQWdCLFFBQWpCLEVBQTJCLEVBQTNCLENBQXJDLENBTCtCLENBTy9COztBQUNBLFVBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxXQUF0QixDQVIrQixDQVMvQjs7QUFDQSxVQUFJLFlBQVksR0FBRyxTQUFTLENBQUMsV0FBN0IsQ0FWK0IsQ0FXL0I7O0FBQ0EsVUFBSSxRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxJQUFuQyxFQUF5QyxnQkFBekMsQ0FBMEQsV0FBMUQsQ0FBRCxFQUF5RSxFQUF6RSxDQUF2QixDQVorQixDQWEvQjs7QUFDQSxVQUFJLFlBQVksR0FBRyxLQUFuQixFQUEwQjtBQUN0QixRQUFBLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBTCxDQUFVLFFBQVEsR0FBRyxLQUFYLEdBQW1CLFlBQTdCLEVBQTJDLEVBQTNDLENBQVg7QUFDQSxRQUFBLFFBQVEsR0FBRyxRQUFRLEdBQUcsV0FBWCxHQUF5QixRQUFRLEdBQUcsV0FBcEMsR0FBa0QsUUFBUSxHQUFHLENBQXhFO0FBQ0EsUUFBQSxTQUFTLENBQUMsS0FBVixD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dGVudCI6WyJjb25zdCBTT1NVdGlscyA9IHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGpxdWVyeVNlbGVjdG9yXHJcbiAgICAgKiBAcGFyYW0gbWF4Rm9udFNpemVcclxuICAgICAqIEBmdW5jdGlvbihzdHJpbmcsIGludCk6IHZvaWRcclxuICAgICAqL1xyXG4gICAgZml0VGV4dDogZnVuY3Rpb24oanF1ZXJ5U2VsZWN0b3IsIG1heEZvbnRTaXplKSB7XHJcbiAgICAgICAgLy8gZ2V0IHRoZSBET00gb3V0cHV0IGVsZW1lbnQgYnkgaXRzIHNlbGVjdG9yXHJcblxyXG4gICAgICAgICQoanF1ZXJ5U2VsZWN0b3IpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsZXQgb3V0cHV0RGl2ID0gdGhpcztcclxuICAgICAgICAgICAgb3V0cHV0RGl2LnN0eWxlLndoaXRlU3BhY2UgPSBcIm5vd3JhcFwiO1xyXG5cclxuICAgICAgICAgICAgLy8gbWF4IGZvbnQgc2l6ZSBpbiBwaXhlbHNcclxuICAgICAgICAgICAgbWF4Rm9udFNpemUgPSBtYXhGb250U2l6ZSB8fCBwYXJzZUludChvdXRwdXREaXYuc3R5bGUuZm9udFNpemUsIDEwKTtcclxuXHJcbiAgICAgICAgICAgIC8vIGdldCBlbGVtZW50J3Mgd2lkdGhcclxuICAgICAgICAgICAgbGV0IHdpZHRoID0gb3V0cHV0RGl2LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAvLyBnZXQgY29udGVudCdzIHdpZHRoXHJcbiAgICAgICAgICAgIGxldCBjb250ZW50V2lkdGggPSBvdXRwdXREaXYuc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgICAgIC8vIGdldCBmb250U2l6ZVxyXG4gICAgICAgICAgICBsZXQgZm9udFNpemUgPSBwYXJzZUludCh3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShvdXRwdXREaXYsIG51bGwpLmdldFByb3BlcnR5VmFsdWUoJ2ZvbnQtc2l6ZScpLCAxMCk7XHJcbiAgICAgICAgICAgIC8vIGlmIGNvbnRlbnQncyB3aWR0aCBpcyBiaWdnZXIgdGhlbiBlbGVtZW50cyB3aWR0aCAtIG92ZXJmbG93XHJcbiAgICAgICAgICAgIGlmIChjb250ZW50V2lkdGggPiB3aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSBNYXRoLmNlaWwoZm9udFNpemUgKiB3aWR0aCAvIGNvbnRlbnRXaWR0aCwgMTApO1xyXG4gICAgICAgICAgICAgICAgZm9udFNpemUgPSBmb250U2l6ZSA+IG1heEZvbnRTaXplID8gZm9udFNpemUgPSBtYXhGb250U2l6ZSA6IGZvbnRTaXplIC0gMTtcclxuICAgICAgICAgICAgICAgIG91dHB1dERpdi5zdHlsZS5mb250U2l6ZSA9IGZvbnRTaXplICsgJ3B4JztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnRlbnQgaXMgc21hbGxlciB0aGVuIHdpZHRoLi4uIGxldCdzIHJlc2l6ZSBpbiAxIHB4IHVudGlsIGl0IGZpdHNcclxuICAgICAgICAgICAgICAgIHdoaWxlIChjb250ZW50V2lkdGggPT09IHdpZHRoICYmIGZvbnRTaXplIDwgbWF4Rm9udFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb250U2l6ZSA9IE1hdGguY2VpbChmb250U2l6ZSkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplID0gZm9udFNpemUgPiBtYXhGb250U2l6ZSA/IGZvbnRTaXplID0gbWF4Rm9udFNpemUgOiBmb250U2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICBvdXRwdXREaXYuc3R5bGUuZm9udFNpemUgPSBmb250U2l6ZSArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdXBkYXRlIHdpZHRoc1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gb3V0cHV0RGl2LmNsaWVudFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRXaWR0aCA9IG91dHB1dERpdi5zY3JvbGxXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY29udGVudFdpZHRoID4gd2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0RGl2LnN0eWxlLmZvbnRTaXplID0gZm9udFNpemUgLSAxICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG4gICAgfVxyXG59OyIsImNvbnN0IFdzU3Vic2NyaWJlcnMgPSB7XHJcbiAgICBfX3N1YnNjcmliZXJzOiB7fSxcclxuICAgIHdlYnNvY2tldDogdW5kZWZpbmVkLFxyXG4gICAgd2ViU29ja2V0Q29ubmVjdGVkOiBmYWxzZSxcclxuICAgIHJlZ2lzdGVyUXVldWU6IFtdLFxyXG4gICAgaW5pdDogZnVuY3Rpb24ocG9ydCwgZGVidWcsIGRlYnVnRmlsdGVycykge1xyXG4gICAgICAgIHBvcnQgPSBwb3J0IHx8IDQ5MzIyO1xyXG4gICAgICAgIGRlYnVnID0gZGVidWcgfHwgZmFsc2U7XHJcbiAgICAgICAgaWYgKGRlYnVnKSB7XHJcbiAgICAgICAgICAgIGlmIChkZWJ1Z0ZpbHRlcnMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiV2ViU29ja2V0IERlYnVnIE1vZGUgZW5hYmxlZCB3aXRoIGZpbHRlcmluZy4gT25seSBldmVudHMgbm90IGluIHRoZSBmaWx0ZXIgbGlzdCB3aWxsIGJlIGR1bXBlZFwiKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIldlYlNvY2tldCBEZWJ1ZyBNb2RlIGVuYWJsZWQgd2l0aG91dCBmaWx0ZXJzIGFwcGxpZWQuIEFsbCBldmVudHMgd2lsbCBiZSBkdW1wZWQgdG8gY29uc29sZVwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlRvIHVzZSBmaWx0ZXJzLCBwYXNzIGluIGFuIGFycmF5IG9mICdjaGFubmVsOmV2ZW50JyBzdHJpbmdzIHRvIHRoZSBzZWNvbmQgcGFyYW1ldGVyIG9mIHRoZSBpbml0IGZ1bmN0aW9uXCIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFdzU3Vic2NyaWJlcnMud2ViU29ja2V0ID0gbmV3IFdlYlNvY2tldChcIndzOi8vbG9jYWxob3N0OlwiICsgcG9ydCk7XHJcbiAgICAgICAgV3NTdWJzY3JpYmVycy53ZWJTb2NrZXQub25tZXNzYWdlID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGxldCBqRXZlbnQgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoIWpFdmVudC5oYXNPd25Qcm9wZXJ0eSgnZXZlbnQnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBldmVudFNwbGl0ID0gakV2ZW50LmV2ZW50LnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgIGxldCBjaGFubmVsID0gZXZlbnRTcGxpdFswXTtcclxuICAgICAgICAgICAgbGV0IGV2ZW50X2V2ZW50ID0gZXZlbnRTcGxpdFsxXTtcclxuICAgICAgICAgICAgaWYgKGRlYnVnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWRlYnVnRmlsdGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGNoYW5uZWwsIGV2ZW50X2V2ZW50LCBqRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChkZWJ1Z0ZpbHRlcnMgJiYgZGVidWdGaWx0ZXJzLmluZGV4T2YoakV2ZW50LmV2ZW50KSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjaGFubmVsLCBldmVudF9ldmVudCwgakV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBXc1N1YnNjcmliZXJzLnRyaWdnZXJTdWJzY3JpYmVycyhjaGFubmVsLCBldmVudF9ldmVudCwgakV2ZW50LmRhdGEpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgV3NTdWJzY3JpYmVycy53ZWJTb2NrZXQub25vcGVuID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBXc1N1YnNjcmliZXJzLnRyaWdnZXJTdWJzY3JpYmVycyhcIndzXCIsIFwib3BlblwiKTtcclxuICAgICAgICAgICAgV3NTdWJzY3JpYmVycy53ZWJTb2NrZXRDb25uZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBXc1N1YnNjcmliZXJzLnJlZ2lzdGVyUXVldWUuZm9yRWFjaCgocikgPT4ge1xyXG4gICAgICAgICAgICAgICAgV3NTdWJzY3JpYmVycy5zZW5kKFwid3NSZWxheVwiLCBcInJlZ2lzdGVyXCIsIHIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgV3NTdWJzY3JpYmVycy5yZWdpc3RlclF1ZXVlID0gW107XHJcbiAgICAgICAgfTtcclxuICAgICAgICBXc1N1YnNjcmliZXJzLndlYlNvY2tldC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBXc1N1YnNjcmliZXJzLnRyaWdnZXJTdWJzY3JpYmVycyhcIndzXCIsIFwiZXJyb3JcIik7XHJcbiAgICAgICAgICAgIFdzU3Vic2NyaWJlcnMud2ViU29ja2V0Q29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBXc1N1YnNjcmliZXJzLndlYlNvY2tldC5vbmNsb3NlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBXc1N1YnNjcmliZXJzLnRyaWdnZXJTdWJzY3JpYmVycyhcIndzXCIsIFwiY2xvc2VcIik7XHJcbiAgICAgICAgICAgIFdzU3Vic2NyaWJlcnMud2ViU29ja2V0Q29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfTtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqIEFkZCBjYWxsYmFja3MgZm9yIHdoZW4gY2VydGFpbiBldmVudHMgYXJlIHRocm93blxyXG4gICAgICogRXhlY3V0aW9uIGlzIGd1YXJhbnRlZWQgdG8gYmUgaW4gRmlyc3QgSW4gRmlyc3QgT3V0IG9yZGVyXHJcbiAgICAgKiBAcGFyYW0gY2hhbm5lbHNcclxuICAgICAqIEBwYXJhbSBldmVudHNcclxuICAgICAqIEBwYXJhbSBjYWxsYmFja1xyXG4gICAgICovXHJcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uKGNoYW5uZWxzLCBldmVudHMsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjaGFubmVscyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBsZXQgY2hhbm5lbCA9IGNoYW5uZWxzO1xyXG4gICAgICAgICAgICBjaGFubmVscyA9IFtdO1xyXG4gICAgICAgICAgICBjaGFubmVscy5wdXNoKGNoYW5uZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50cyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBsZXQgZXZlbnQgPSBldmVudHM7XHJcbiAgICAgICAgICAgIGV2ZW50cyA9IFtdO1xyXG4gICAgICAgICAgICBldmVudHMucHVzaChldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNoYW5uZWxzLmZvckVhY2goZnVuY3Rpb24oYykge1xyXG4gICAgICAgICAgICBldmVudHMuZm9yRWFjaChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFXc1N1YnNjcmliZXJzLl9fc3Vic2NyaWJlcnMuaGFzT3duUHJvcGVydHkoYykpIHtcclxuICAgICAgICAgICAgICAgICAgICBXc1N1YnNjcmliZXJzLl9fc3Vic2NyaWJlcnNbY10gPSB7fTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghV3NTdWJzY3JpYmVycy5fX3N1YnNjcmliZXJzW2NdLmhhc093blByb3BlcnR5KGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgV3NTdWJzY3JpYmVycy5fX3N1YnNjcmliZXJzW2NdW2VdID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFdzU3Vic2NyaWJlcnMud2ViU29ja2V0Q29ubmVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFdzU3Vic2NyaWJlcnMuc2VuZChcIndzUmVsYXlcIiwgXCJyZWdpc3RlclwiLCBgJHtjfToke2V9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgV3NTdWJzY3JpYmVycy5yZWdpc3RlclF1ZXVlLnB1c2goYCR7Y306JHtlfWApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFdzU3Vic2NyaWJlcnMuX19zdWJzY3JpYmVyc1tjXVtlXS5wdXNoKGNhbGxiYWNrKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgIH0sXHJcbiAgICBjbGVhckV2ZW50Q2FsbGJhY2tzOiBmdW5jdGlvbiAoY2hhbm5lbCwgZXZlbnQpIHtcclxuICAgICAgICBpZiAoV3NTdWJzY3JpYmVycy5fX3N1YnNjcmliZXJzLmhhc093blByb3BlcnR5KGNoYW5uZWwpICYmIFdzU3Vic2NyaWJlcnMuX19zdWJzY3JpYmVyc1tjaGFubmVsXS5oYXNPd25Qcm9wZXJ0eShldmVudCkpIHtcclxuICAgICAgICAgICAgV3NTdWJzY3JpYmVycy5fX3N1YnNjcmliZXJzW2NoYW5uZWxdID0ge307XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHRyaWdnZXJTdWJzY3JpYmVyczogZnVuY3Rpb24gKGNoYW5uZWwsIGV2ZW50LCBkYXRhKSB7XHJcbiAgICAgICAgaWYgKFdzU3Vic2NyaWJlcnMuX19zdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShjaGFubmVsKSAmJiBXc1N1YnNjcmliZXJzLl9fc3Vic2NyaWJlcnNbY2hhbm5lbF0uaGFzT3duUHJvcGVydHkoZXZlbnQpKSB7XHJcbiAgICAgICAgICAgIFdzU3Vic2NyaWJlcnMuX19zdWJzY3JpYmVyc1tjaGFubmVsXVtldmVudF0uZm9yRWFjaChmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrIGluc3RhbmNlb2YgRnVuY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhkYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHNlbmQ6IGZ1bmN0aW9uIChjaGFubmVsLCBldmVudCwgZGF0YSkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgY2hhbm5lbCAhPT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihcIkNoYW5uZWwgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGV2ZW50ICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFwiRXZlbnQgbXVzdCBiZSBhIHN0cmluZ1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoY2hhbm5lbCA9PT0gJ2xvY2FsJykge1xyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJTdWJzY3JpYmVycyhjaGFubmVsLCBldmVudCwgZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGV0IGNFdmVudCA9IGNoYW5uZWwgKyBcIjpcIiArIGV2ZW50O1xyXG4gICAgICAgICAgICBXc1N1YnNjcmliZXJzLndlYlNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICdldmVudCc6IGNFdmVudCxcclxuICAgICAgICAgICAgICAgICdkYXRhJzogZGF0YVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59OyJdfQ==